<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>github actions on horizoon</title>
    <link>https://horizoon.jp/categories/github-actions/</link>
    <description>Recent content in github actions on horizoon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 28 May 2020 20:05:36 +0900</lastBuildDate>
    
	<atom:link href="https://horizoon.jp/categories/github-actions/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dockerで構築したRailsアプリをGitHub Actionsで高速にCIする為のプラクティス（Rails 6 API編）</title>
      <link>https://horizoon.jp/post/2020/05/28/rails6api_docker_github_actions/</link>
      <pubDate>Thu, 28 May 2020 20:05:36 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2020/05/28/rails6api_docker_github_actions/</guid>
      <description>Rails on GitHub Actions（或いは {Django,Laravel} on GitHub Actions）のCI事例として、
 ホストランナー上にRuby（Python, PHP）をセットアップ MySQLやRedisはサービスコンテナで立ち上げ 依存ライブラリのインストール（bundle install） や ユニットテスト（rspec） もホストランナー上で直接実行  という事例は多く見かけるのですが、開発をDockerベースで行っていて、GitHub ActionsのCI Pipelineも同じくDockerベースで構築したい&amp;hellip;というケースの事例があまり見当たらなかったので、自分が関わったプロジェクト（Rails 6 API mode）での事例を紹介します。
前提条件  Ruby 2.7.1 Rails 6.0.3 (API mode) Docker (Docker for Mac)  Engine 19.03.8 Compose 1.25.5   MySQL 8.0.20 開発環境は全てDocker（Dockerfile/docker-compose.yml）で構築＆管理  bundle install や rails s や rspec などのコマンドは全てdocker-compose {run,exec} を介してコンテナ内で実行   Dockerfileはmulti-stage構成にはしない（今回の例ではひとまず開発用の設定だけが記述されている前提とする） リモートdocker registryは利用しない GitHub Actionsは現時点で公式にDocker layer cachingをサポートしていない 参考1, 参考2  これについては このissue で最新状況が追えそう しばらく対応され無さそう だけど、対応して欲しい&amp;hellip;    TL;DR  dockerイメージのサイズを小さくしたい  イメージ自体でファイルを抱え込むような処理をDockerfileに書かない  ≒ Dockerfileに変更が無くてもビルドイメージに変更が発生し得るようなDockerfile にはしない   実行したいコマンドはコンテナ起動時に都度コマンドとして付与し、成果物を保存・永続化したければvolumesを活用する   CI時も開発環境と同じ Dockerfile/docker-compose.</description>
    </item>
    
    <item>
      <title>Go: GoReleaserの設定ファイルをGithub ActionsのPull Request時CIでテスト/検証する</title>
      <link>https://horizoon.jp/post/2020/03/25/goreleaser_github_actions/</link>
      <pubDate>Wed, 25 Mar 2020 19:15:00 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2020/03/25/goreleaser_github_actions/</guid>
      <description>Summary  GoReleaserの設定ファイル = .goreleaser.yml のテスト/検証もGithub ActionsのPull Request時CIで実行したい GitHub Action for GoReleaser を活用して実現する  前提条件 1 2  $ go version go version go1.13.9 darwin/amd64   CIで.goreleaser.ymlをテストしたい（with Github Actions） Go製ツールのReleaseでGoReleaserを使っている場合、いざReleaseを実施してみたら.goreleaser.ymlに不備があってコケてしまった → ymlを修正してやむを得ずバージョンもupした、、、という切ないケースに遭遇してしまう事がありますよね（自分は以前度々ありました&amp;hellip;）。
もしCIで.goreleaser.ymlのテスト/検証が出来れば、Release前にymlの不備を検知する事が出来ます。以前書いたdepからgo modulesへの移行に関する記事にも載せた のですが、GoReleaserにはdry-runの機能があります。具体的にはgoreleaserコマンドに --skip-publish という公開（release）をskip出来るオプションと、 --snapshot というバージョンタグのチェックを行わず現状のコードベースの成果物を出力するオプションがあり、GoReleaserのgithub actions でもこれらのオプションはそのまま利用可能です。
yamlの例 yaml内に (番号) 形式でコメントしている箇所については後述します。
.github/workflows/ci.yml ※ 拙作ツールのファイル全体像は こちら
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  name:CIon:# (1)push:branches:- masterpull_request:jobs:validate-goreleaser:name:Validate.</description>
    </item>
    
  </channel>
</rss>