<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cloudfront on horizoon</title>
    <link>https://horizoon.jp/categories/cloudfront/</link>
    <description>Recent content in cloudfront on horizoon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 05 Sep 2021 15:47:00 +0900</lastBuildDate><atom:link href="https://horizoon.jp/categories/cloudfront/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>S3とCloudFrontでwebサイトを公開する際のバケット設定はどうすべきか？</title>
      <link>https://horizoon.jp/post/2021/09/05/s3_website_hosting/</link>
      <pubDate>Sun, 05 Sep 2021 15:47:00 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2021/09/05/s3_website_hosting/</guid>
      <description>公式のナレッジセンターの記事「CloudFront を使用して Amazon S3 でホストされた静的ウェブサイトを公開する」 で紹介されているwebサイト公開手法、 複数あるけど結局どれを採用すれば良いのか？という判断基準を整理したく、纏めてみました。
外部・viewer -&amp;gt; CloudFront -&amp;gt; S3 バケット（公開物はここに配置） という通信経路を想定しています。
論点 S3 × CloudFront という組み合わせでwebサイトを公開する場合の、バケットの作成方法の選択肢2通り webサイトホスティング エンドポイント = webサイトエンドポイント 非・webサイトホスティング エンドポイント = REST API エンドポイント 参考: webサイトエンドポイントとREST APIエンドポイントの主な違い 上記2通りのバケット作成方法のメリット・デメリットと、作成方法選択時の判断基準は何なのか？ 機能要件的な観点＝外部・viewerからサイトにアクセスするユーザー観点では、上記2通りでどんな違いが生じうるのか？ 非機能要件的な観点では、上記2通りでどんな違いが生じうるのか？ webサイト公開が目的でも「非・webサイトホスティング を選ぶべき場合」があるなら、それはどういう場合なのか？ 先に結論まとめ 外部・viewerからサイトにアクセスするユーザー観点 一部 webサイトホスティングでのみ可能な機能 も存在しており、これらを利用したいかどうか？が判断材料になり得る フォルダへのアクセスでもindexドキュメントを設定する事が出来る バケット内のオブジェクトに対して、他バケットや他ドメインへのリダイレクトを設定する事が出来る 非機能要件的な観点 例えば構築するシステムや開発組織のセキュリティ対応の為、非・webサイトホスティング を選ばざるを得ないケース がある 例: CloudFront -&amp;gt; S3 間の通信を、何らかの事情で HTTPS にしなければならない webサイトホスティングのバケットへの通信を HTTPS にする事はできないので、非・webサイトホスティング一択となる 例: 何らかの事情でバケットにパブリックアクセスを許可する事が出来ない webサイトホスティングのバケットはパブリックアクセスの許可が前提となるので、非・webサイトホスティング一択となる etc 検証内容と前提条件 構築＆検証用の環境のパターンは以下の通り S3(webサイトホスティング) × CloudFront S3(非・webサイトホスティング) × CloudFront ※ S3バケットのみ というパターンはこの記事では触れない http methodは参照系のみを想定 つまり、POST, PUT, DELETE 等の更新系methodは想定しない CloudFrontでは、独自ドメインは利用しない ユーザーがアクセスするURLは https://自動生成ドメイン文字列.</description>
    </item>
    
  </channel>
</rss>
