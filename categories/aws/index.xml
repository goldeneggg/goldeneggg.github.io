<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aws on horizoon</title>
    <link>https://horizoon.jp/categories/aws/</link>
    <description>Recent content in aws on horizoon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 05 Sep 2021 15:47:00 +0900</lastBuildDate><atom:link href="https://horizoon.jp/categories/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>S3とCloudFrontでwebサイトを公開する際のバケット設定はどうすべきか？</title>
      <link>https://horizoon.jp/post/2021/09/05/s3_website_hosting/</link>
      <pubDate>Sun, 05 Sep 2021 15:47:00 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2021/09/05/s3_website_hosting/</guid>
      <description>公式のナレッジセンターの記事「CloudFront を使用して Amazon S3 でホストされた静的ウェブサイトを公開する」 で紹介されているwebサイト公開手法、 複数あるけど結局どれを採用すれば良いのか？という判断基準を整理したく、纏めてみました。
外部・viewer -&amp;gt; CloudFront -&amp;gt; S3 バケット（公開物はここに配置） という通信経路を想定しています。
論点  S3 × CloudFront という組み合わせでwebサイトを公開する場合の、バケットの作成方法の選択肢2通り  webサイトホスティング  エンドポイント = webサイトエンドポイント   非・webサイトホスティング  エンドポイント = REST API エンドポイント 参考: webサイトエンドポイントとREST APIエンドポイントの主な違い     上記2通りのバケット作成方法のメリット・デメリットと、作成方法選択時の判断基準は何なのか？  機能要件的な観点＝外部・viewerからサイトにアクセスするユーザー観点では、上記2通りでどんな違いが生じうるのか？ 非機能要件的な観点では、上記2通りでどんな違いが生じうるのか？ webサイト公開が目的でも「非・webサイトホスティング を選ぶべき場合」があるなら、それはどういう場合なのか？    先に結論まとめ  外部・viewerからサイトにアクセスするユーザー観点  一部 webサイトホスティングでのみ可能な機能 も存在しており、これらを利用したいかどうか？が判断材料になり得る  フォルダへのアクセスでもindexドキュメントを設定する事が出来る バケット内のオブジェクトに対して、他バケットや他ドメインへのリダイレクトを設定する事が出来る     非機能要件的な観点  例えば構築するシステムや開発組織のセキュリティ対応の為、非・webサイトホスティング を選ばざるを得ないケース がある  例: CloudFront -&amp;gt; S3 間の通信を、何らかの事情で HTTPS にしなければならない  webサイトホスティングのバケットへの通信を HTTPS にする事はできないので、非・webサイトホスティング一択となる   例: 何らかの事情でバケットにパブリックアクセスを許可する事が出来ない  webサイトホスティングのバケットはパブリックアクセスの許可が前提となるので、非・webサイトホスティング一択となる     etc    検証内容と前提条件  構築＆検証用の環境のパターンは以下の通り  S3(webサイトホスティング) × CloudFront S3(非・webサイトホスティング) × CloudFront ※ S3バケットのみ というパターンはこの記事では触れない   http methodは参照系のみを想定  つまり、POST, PUT, DELETE 等の更新系methodは想定しない   CloudFrontでは、独自ドメインは利用しない  ユーザーがアクセスするURLは https://自動生成ドメイン文字列.</description>
    </item>
    
    <item>
      <title>AWS SAMによるLambda Layers ＆ Layers利用Functionの作成手順と運用観点での注意点（2021年3月, SAM 1.19版）</title>
      <link>https://horizoon.jp/post/2021/03/05/lambda_layer_nodejs_2/</link>
      <pubDate>Fri, 05 Mar 2021 12:03:36 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2021/03/05/lambda_layer_nodejs_2/</guid>
      <description>※この記事は以前zenn.devで公開した記事 の、筆者による転載となります。
Summary  Node.jsのLambdaで、レイヤー用のスタックと、それを利用するFunctionスタックのAWS SAMによる作成を以下の手順で実施  レイヤーのスタックをデプロイ レイヤーを利用するLambda Functionのスタックで、sam local invoke によるローカル実行で動作確認 レイヤーを利用するLambda Functionのスタックをデプロイ   レイヤーのスタックでは、&amp;lt;テンプレートのContentUriで指定したフォルダ&amp;gt;/nodejs/node_modules というフォルダにライブラリがインストールされるようにフォルダを構成する sam deploy を --guided オプション付きで実行するとデプロイ成果物配置用のS3バケットを自動で作成（既にあれば再利用）してくれるが、このバケットは &amp;ldquo;バージョニング有・ライフサイクル未設定&amp;rdquo; で作成されるので、samconfig.tomlによって2回目以降のデプロイ手順を簡略化する事が出来る恩恵とバージョニングの恩恵 vs コスト面の課題 のメリデメを判断して利用する  --guided オプションと --s3-bucket オプションでの固有バケット指定を併用すると、--s3-bucket オプションの内容は無視される    前提条件  Summaryに記載の通り、スタックがレイヤー用とそれを利用するLambda Functionで別々になっている、というケースを想定しています  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  # aws-cliのバージョン $ aws --version aws-cli/2.1.28 Python/3.9.2 Darwin/19.6.0 source/x86_64 prompt/off # aws-sam-cliのバージョン $ sam --version SAM CLI, version 1.</description>
    </item>
    
    <item>
      <title>aws-sdk-go, aws-sdk-go-v2 でMFAトークンによるAssumeRoleに対応する</title>
      <link>https://horizoon.jp/post/2019/08/16/aws_sdk_go_assumerole/</link>
      <pubDate>Fri, 16 Aug 2019 17:10:35 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2019/08/16/aws_sdk_go_assumerole/</guid>
      <description>Summary  aws-sdk-goで、標準入力からのMFAトークン入力によるAssumeRoleを実装する aws-sdk-go-v2で、標準入力からのMFAトークン入力によるAssumeRoleを実装する  前提条件  aws-sdk-go - v1.21.x aws-sdk-go-v2 - v0.10.0  aws-sdk-goで、標準入力からのMFAトークン入力によるAssumeRoleを実装する AssumeRole便利ですよね。AssumeRole自体の詳細な説明は公式のチュートリアル 等の記事に任せるとして、aws-sdk-goもMFAによるAssumeRoleに対応しています。拙作のEC2インスタンス一覧取得ツール で これを実装する機会があったので、実装方法の備忘メモを残しておきます。
今回の要件は下記を想定しました。
 一時的セキュリティ認証情報(STS)を利用した実装 にはしない 代わりに 切替用のIAMロールを設定ファイル経由で使用できるようにする 実装にする  ~/.aws/credentials と ~/.aws/config に、IAMユーザのprofileと切替先ロールのprofileを定義し、これを使用する この実装にすることで、コマンドやライブラリを使う側が指定しなければならない情報（例えばRoleARNやSessionTokenなど）を削減できる   実際に利用する際はMFAトークンの入力を（標準入力から）促し、普段使っている2段階認証アプリ等で表示されたトークンを入力することで、切替先ロールの各種リソースにアクセスできるようにする  ~/.aws/credentials と ~/.aws/config の設定内容 公式の例 を参考に下記のような内容で作成しておきます。リンク先でも触れられていますが、aws-sdk-goだけに限らず、他言語のSDKやawscliでもこの設定は使い回す事が出来ます。
1 2 3 4 5 6  # ~/.aws/credentials # IAMユーザーのアクセスキー情報が hoge という名前のprofileで定義されている [hoge] aws_access_key_id=ACCESS_KEY_ID aws_secret_access_key=SECRET_ACCESS_KEY   1 2 3 4 5 6 7 8 9 10 11 12 13  # ~/.</description>
    </item>
    
    <item>
      <title>Travis CIによるLambdaの自動デプロイ with AWS SAM in Go</title>
      <link>https://horizoon.jp/post/2019/06/11/sam_cicd/</link>
      <pubDate>Tue, 11 Jun 2019 17:16:54 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2019/06/11/sam_cicd/</guid>
      <description>Summary  AWS SAMで管理しているLambda Functionのデプロイ自動化を、AWS CodePipelineやAWS CodeBuildを使うことなく Travis CIを活用して行う  今回利用したLambda FunctionはGo製 Pull Requestのmasterブランチへのmerge時に、samコマンドで自動デプロイ    前提条件  Lambdaのリポジトリはgithub 各種バージョン情報は下記の通り  1 2 3 4 5 6 7 8 9 10 11  $ python --version Python 2.7.12 $ pip --version pip 19.0.3 from /usr/local/lib/python2.7/dist-packages/pip (python 2.7) $ aws --version aws-cli/1.16.175 Python/2.7.12 Linux/4.15.0-1028-gcp botocore/1.12.165 $ sam --version SAM CLI, version 0.17.0   SAMで管理しているLambdaのデプロイをTravis CIで自動化したい SAMで管理しているLambdaのデプロイ自動化をTravis CIで行います。SAMで管理しているからにはSAMのテンプレートとaws-sam-cliを使ってデプロイを行いたいです。なのでTravis公式のLambdaデプロイサポートは使用しません。
 branch !</description>
    </item>
    
    <item>
      <title>Goで構造体へのインタフェース埋め込み活用例（aws-sdk-goの事例など）</title>
      <link>https://horizoon.jp/post/2019/03/16/go_embedded_interface/</link>
      <pubDate>Sat, 16 Mar 2019 12:03:00 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2019/03/16/go_embedded_interface/</guid>
      <description>Summary 構造体へのインタフェース埋め込み活用例 ×2
 一部メソッドを別処理に差し替え 特定のメソッドだけを実装  外部APIアクセスなどを伴う機能のテストをmockで行いたい場合に、gomockのようなmock用ライブラリに依存せずにmock化を実現    1 2 3 4 5 6 7 8  type Intf interface { MethodY() MethodZ() } type B struct { Intf // こういう埋め込み }   例1：一部メソッドを別処理に差し替え 無名インタフェースの埋め込み例として本家コードで参考になるのがsort/sort.go のこの実装 です。reverse構造体のコメントにも書いてある通りこうした無名インタフェースを埋め込んだ構造体を利用する事で「一部のメソッドだけ別の実装に差し替える」という事を実現しています。
単純なサンプルコードはこんな感じで、Intfというinterfaceを実装済のAという構造体を ReplaceMethodZ に渡すと、MethodZの挙動だけが異なる別の構造体を取得するという挙動になります。
（同じコードはこちら → https://play.golang.org/p/mh803JB5RSt ）
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  package main import ( &amp;#34;fmt&amp;#34; ) type Intf interface { MethodY() MethodZ() } type A struct { Str string } func (a *A) MethodY() { fmt.</description>
    </item>
    
    <item>
      <title>既存のLambda FunctionにLambda Layersを導入し、AWS SAMで管理する（Node.js）</title>
      <link>https://horizoon.jp/post/2019/02/07/lambda_layer_nodejs8/</link>
      <pubDate>Thu, 07 Feb 2019 14:42:54 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2019/02/07/lambda_layer_nodejs8/</guid>
      <description>Summary  axiosなどのモジュールに依存した既存のNode.js Lambda Functionがある このfunctionで使用しているモジュールをAWS Lambda Layersに移行し、aws-sam-cliでデプロイする 既存functionで個別にnpm installしていたモジュールを削除し、デプロイしたLayerを使用するように変更する Layer移行後も既存functionが sam local invoke コマンドでローカルで実行できる事を確認する Layerを使うように変更した既存functionをデプロイする 移行した結果  既存functionのサイズを半分以下に削減できた 既存functionの実行時間を半分以下に削減できた   AWS SAM 便利  Lambda Layerも便利、だけど、チーム開発でCIの仕組み構築まで考え始めると一工夫必要かも？    前提条件 1 2 3 4 5 6 7  # aws-cliのバージョン $ aws --version aws-cli/1.16.80 Python/3.7.1 Darwin/18.2.0 botocore/1.12.70 # aws-sam-cliのバージョン $ sam --version SAM CLI, version 0.10.0   既存Functionで使用中のモジュールをLayersに移行する Layer用のプロジェクトディレクトリを作成し、Layer化したいnpmモジュールをインストールします。 ディレクトリの構成は公式ドキュメントの記載 の通り nodejs/node_modules という構成になるようにします。
1 2 3 4 5 6  $ cd &amp;lt;PROJECT_ROOT&amp;gt; $ mkdir nodejs $ cd nodejs $ npm init -y $ npm install [必要なモジュール群]   ここまで完了すると、PROJECT_ROOTの下には下記のディレクトリとファイルが作成された状態になります</description>
    </item>
    
  </channel>
</rss>
