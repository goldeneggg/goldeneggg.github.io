<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>horizoon</title>
    <link>https://horizoon.jp/</link>
    <description>Recent content on horizoon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 05 Sep 2021 15:47:00 +0900</lastBuildDate><atom:link href="https://horizoon.jp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>S3 × CloudFrontでwebサイトを公開する際の構築パターンと判断基準まとめ</title>
      <link>https://horizoon.jp/post/2021/09/05/s3_website_hosting/</link>
      <pubDate>Sun, 05 Sep 2021 15:47:00 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2021/09/05/s3_website_hosting/</guid>
      <description>公式のナレッジセンターの記事「CloudFront を使用して Amazon S3 でホストされた静的ウェブサイトを公開する」 で紹介されているwebサイト公開手法、 複数あるけど結局どれを採用すれば良いのか？という判断基準を整理したく、纏めてみました。
外部・viewer -&amp;gt; CloudFront -&amp;gt; S3 バケット（公開物はここに配置） という通信経路を想定しています。
論点  S3 × CloudFront という組み合わせでwebサイトを公開する場合の、バケットの作成方法の選択肢2通り  webサイトホスティング  エンドポイント = webサイトエンドポイント   非・webサイトホスティング  エンドポイント = REST API エンドポイント 参考: webサイトエンドポイントとREST APIエンドポイントの主な違い     上記2通りのバケット作成方法のメリット・デメリットと、方法選択時の判断基準は何なのか？  機能要件的な観点＝外部・viewerからサイトにアクセスするユーザー観点では、上記2通りでどんな違いが生じうるのか？ 非機能要件的な観点では、上記2通りでどんな違いが生じうるのか？ webサイト公開が目的でも「非・webサイトホスティング を選ぶべき場合」があるなら、それはどういう場合なのか？    先に結論まとめ  外部・viewerからサイトにアクセスするユーザー観点  webサイトホスティングでも非・webサイトホスティングでも同様の事が実現できる   非機能要件的な観点  例えば構築するシステムや開発組織のセキュリティ対応の為、非・webサイトホスティング を選ばざるを得ないケース がある  例: CloudFront -&amp;gt; S3 間の通信を、何らかの事情で HTTPS にしなければならない  webサイトホスティングのバケットへの通信を HTTPS にする事はできないので、非・webサイトホスティング一択となる   例: 何らかの事情でバケットにパブリックアクセスを許可する事が出来ない  webサイトホスティングのバケットはパブリックアクセスの許可が前提となるので、非・webサイトホスティング一択となる     etc    検証内容と前提条件  構築＆検証用の環境のパターンは以下の通り  S3(webサイトホスティング) × CloudFront S3(非・webサイトホスティング) × CloudFront ※ S3バケットのみ というパターンはこの記事では触れない   http methodは参照系のみを想定  つまり、POST, PUT, DELETE 等の更新系methodは想定しない   CloudFrontでは、独自ドメインは利用しない  ユーザーがアクセスするURLは https://自動生成ドメイン文字列.</description>
    </item>
    
    <item>
      <title>AWS SAMによるLambda Layers ＆ Layers利用Functionの作成手順と運用観点での注意点（2021年3月, SAM 1.19版）</title>
      <link>https://horizoon.jp/post/2021/03/05/lambda_layer_nodejs_2/</link>
      <pubDate>Fri, 05 Mar 2021 12:03:36 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2021/03/05/lambda_layer_nodejs_2/</guid>
      <description>※この記事は以前zenn.devで公開した記事 の、筆者による転載となります。
Summary  Node.jsのLambdaで、レイヤー用のスタックと、それを利用するFunctionスタックのAWS SAMによる作成を以下の手順で実施  レイヤーのスタックをデプロイ レイヤーを利用するLambda Functionのスタックで、sam local invoke によるローカル実行で動作確認 レイヤーを利用するLambda Functionのスタックをデプロイ   レイヤーのスタックでは、&amp;lt;テンプレートのContentUriで指定したフォルダ&amp;gt;/nodejs/node_modules というフォルダにライブラリがインストールされるようにフォルダを構成する sam deploy を --guided オプション付きで実行するとデプロイ成果物配置用のS3バケットを自動で作成（既にあれば再利用）してくれるが、このバケットは &amp;ldquo;バージョニング有・ライフサイクル未設定&amp;rdquo; で作成されるので、samconfig.tomlによって2回目以降のデプロイ手順を簡略化する事が出来る恩恵とバージョニングの恩恵 vs コスト面の課題 のメリデメを判断して利用する  --guided オプションと --s3-bucket オプションでの固有バケット指定を併用すると、--s3-bucket オプションの内容は無視される    前提条件  Summaryに記載の通り、スタックがレイヤー用とそれを利用するLambda Functionで別々になっている、というケースを想定しています  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  # aws-cliのバージョン $ aws --version aws-cli/2.1.28 Python/3.9.2 Darwin/19.6.0 source/x86_64 prompt/off # aws-sam-cliのバージョン $ sam --version SAM CLI, version 1.</description>
    </item>
    
    <item>
      <title>AlfredワークフローでPDF等の改行が含まれるテキストをサクッと正確に翻訳</title>
      <link>https://horizoon.jp/post/2021/01/16/translation_with_alfred_workflow/</link>
      <pubDate>Sat, 16 Jan 2021 13:05:00 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2021/01/16/translation_with_alfred_workflow/</guid>
      <description>Summary  「PDFをコピペして翻訳サービスで翻訳したい時に、改行が含まれて翻訳結果が変になる問題」を雑にどうにかするAlfredワークフローを作った  https://github.com/goldeneggg/alfred-workflow-selected-text-translator    前提条件  Alfred Powerpackを導入している（＝Alfredのワークフロー機能が利用できる）  PDFからコピペした文章の翻訳を、「選択したテキストが翻訳される」という体験で実現したい 「PDFをコピペしたい時に改行が含まれて翻訳結果が変になる問題」って何？というイメージがこちらです。文章途中で改行が混ざった結果、翻訳結果が変になる、という事象です。同じ経験をされた方も多いのではないかと思います。
 PDF 翻訳 改行 等でググると様々な解決策がHITしますが、普段ChromeのGoogle翻訳拡張に慣れている筆者としては、やはり「ドラッグして選択したテキストが翻訳される」という体験をPDF（等のE-Books）翻訳でも再現したいな と考え、「選択したテキストに対して何かをする事が出来ると言えば AlfredワークフローのHotkeyトリガー だ」と雑に思いついて作ってみたワークフローがこちらです。
https://github.com/goldeneggg/alfred-workflow-selected-text-translator
このワークフローを使うことで
 PDF等のE-Booksのテキストをドラッグ＆選択し、 設定したHotkey（例: Option + Shift + Command + T など）を押せば、 ブラウザで　改行が混ざっていない文章の翻訳結果が Google翻訳で表示される  ようになります。
 インストール手順は 上記reposのREADME を参照ください。
ワークフローの構成紹介 ワークフロー全体のイメージはこんな感じです。
 まず AlfredワークフローのHotkeyトリガー を下記のように設定します。Argument を Selection in macOS にすることで、ドラッグして選択しているテキストの内容を後続のアクションに渡す事が出来ます。
 次にHotkeyトリガーから渡されてきたテキストを Write File Output に渡してtemporaryなテキストファイルに出力しておきます。
 そしてRun Script Action で、このファイルをcatした結果を tr コマンドをかまして改行除去します。Run Script Actionから後続アクションに渡される内容は「スクリプトで標準出力に出力した内容」になりますので、特にAlfredワークフローだからと言って何かを意識せず、普段bashでスクリプトを書く時と同様に書けばOKです。</description>
    </item>
    
    <item>
      <title>GitHub Arctic Code Vault で北極圏にコードが保存されました記念</title>
      <link>https://horizoon.jp/post/2020/07/18/github_arctic_code_vault/</link>
      <pubDate>Sat, 18 Jul 2020 11:45:36 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2020/07/18/github_arctic_code_vault/</guid>
      <description>GitHub Archive Program: the journey of the world&amp;rsquo;s open source code to the Arctic - The GitHub Blog
1000年後にデータを残すための「GitHub Archive Program」で21TBのリポジトリの北極圏への保管が完了 - GIGAZINE
私のコードも保存されたようです　※という記念の為（だけ）の備忘記事
 </description>
    </item>
    
    <item>
      <title>Dockerで構築したRailsアプリをGitHub Actionsで高速にCIする為のプラクティス（Rails 6 API編）</title>
      <link>https://horizoon.jp/post/2020/05/28/rails6api_docker_github_actions/</link>
      <pubDate>Thu, 28 May 2020 20:05:36 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2020/05/28/rails6api_docker_github_actions/</guid>
      <description>Rails on GitHub Actions（或いは {Django,Laravel} on GitHub Actions）のCI事例として、
 ホストランナー上にRuby（Python, PHP）をセットアップ MySQLやRedisはサービスコンテナで立ち上げ 依存ライブラリのインストール（bundle install） や ユニットテスト（rspec） もホストランナー上で直接実行  という事例は多く見かけるのですが、開発をDockerベースで行っていて、GitHub ActionsのCI Pipelineも同じくDockerベースで構築したい&amp;hellip;というケースの事例があまり見当たらなかったので、自分が関わったプロジェクト（Rails 6 API mode）での事例を紹介します。
前提条件  Ruby 2.7.1 Rails 6.0.3 (API mode) Docker (Docker for Mac)  Engine 19.03.8 Compose 1.25.5   MySQL 8.0.20 開発環境は全てDocker（Dockerfile/docker-compose.yml）で構築＆管理  bundle install や rails s や rspec などのコマンドは全てdocker-compose {run,exec} を介してコンテナ内で実行   Dockerfileはmulti-stage構成にはしない（今回の例ではひとまず開発用の設定だけが記述されている前提とする） リモートdocker registryは利用しない GitHub Actionsは現時点で公式にDocker layer cachingをサポートしていない 参考1, 参考2  これについては このissue で最新状況が追えそう しばらく対応され無さそう だけど、対応して欲しい&amp;hellip;    TL;DR  dockerイメージのサイズを小さくしたい  イメージ自体でファイルを抱え込むような処理をDockerfileに書かない  ≒ Dockerfileに変更が無くてもビルドイメージに変更が発生し得るようなDockerfile にはしない   実行したいコマンドはコンテナ起動時に都度コマンドとして付与し、成果物を保存・永続化したければvolumesを活用する   CI時も開発環境と同じ Dockerfile/docker-compose.</description>
    </item>
    
    <item>
      <title>Go: GoReleaserの設定ファイルをGithub ActionsのPull Request時CIでテスト/検証する</title>
      <link>https://horizoon.jp/post/2020/03/25/goreleaser_github_actions/</link>
      <pubDate>Wed, 25 Mar 2020 19:15:00 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2020/03/25/goreleaser_github_actions/</guid>
      <description>Summary  GoReleaserの設定ファイル = .goreleaser.yml のテスト/検証もGithub ActionsのPull Request時CIで実行したい GitHub Action for GoReleaser を活用して実現する  前提条件 1 2  $ go version go version go1.13.9 darwin/amd64   CIで.goreleaser.ymlをテストしたい（with Github Actions） Go製ツールのReleaseでGoReleaserを使っている場合、いざReleaseを実施してみたら.goreleaser.ymlに不備があってコケてしまった → ymlを修正してやむを得ずバージョンもupした、、、という切ないケースに遭遇してしまう事がありますよね（自分は以前度々ありました&amp;hellip;）。
もしCIで.goreleaser.ymlのテスト/検証が出来れば、Release前にymlの不備を検知する事が出来ます。以前書いたdepからgo modulesへの移行に関する記事にも載せた のですが、GoReleaserにはdry-runの機能があります。具体的にはgoreleaserコマンドに --skip-publish という公開（release）をskip出来るオプションと、 --snapshot というバージョンタグのチェックを行わず現状のコードベースの成果物を出力するオプションがあり、GoReleaserのgithub actions でもこれらのオプションはそのまま利用可能です。
yamlの例 yaml内に (番号) 形式でコメントしている箇所については後述します。
.github/workflows/ci.yml ※ 拙作ツールのファイル全体像は こちら
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  name:CIon:# (1)push:branches:- masterpull_request:jobs:validate-goreleaser:name:Validate .</description>
    </item>
    
    <item>
      <title>aws-sdk-go, aws-sdk-go-v2 でMFAトークンによるAssumeRoleに対応する</title>
      <link>https://horizoon.jp/post/2019/08/16/aws_sdk_go_assumerole/</link>
      <pubDate>Fri, 16 Aug 2019 17:10:35 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2019/08/16/aws_sdk_go_assumerole/</guid>
      <description>Summary  aws-sdk-goで、標準入力からのMFAトークン入力によるAssumeRoleを実装する aws-sdk-go-v2で、標準入力からのMFAトークン入力によるAssumeRoleを実装する  前提条件  aws-sdk-go - v1.21.x aws-sdk-go-v2 - v0.10.0  aws-sdk-goで、標準入力からのMFAトークン入力によるAssumeRoleを実装する AssumeRole便利ですよね。AssumeRole自体の詳細な説明は公式のチュートリアル 等の記事に任せるとして、aws-sdk-goもMFAによるAssumeRoleに対応しています。拙作のEC2インスタンス一覧取得ツール で これを実装する機会があったので、実装方法の備忘メモを残しておきます。
今回の要件は下記を想定しました。
 一時的セキュリティ認証情報(STS)を利用した実装 にはしない 代わりに 切替用のIAMロールを設定ファイル経由で使用できるようにする 実装にする  ~/.aws/credentials と ~/.aws/config に、IAMユーザのprofileと切替先ロールのprofileを定義し、これを使用する この実装にすることで、コマンドやライブラリを使う側が指定しなければならない情報（例えばRoleARNやSessionTokenなど）を削減できる   実際に利用する際はMFAトークンの入力を（標準入力から）促し、普段使っている2段階認証アプリ等で表示されたトークンを入力することで、切替先ロールの各種リソースにアクセスできるようにする  ~/.aws/credentials と ~/.aws/config の設定内容 公式の例 を参考に下記のような内容で作成しておきます。リンク先でも触れられていますが、aws-sdk-goだけに限らず、他言語のSDKやawscliでもこの設定は使い回す事が出来ます。
1 2 3 4 5 6  # ~/.aws/credentials # IAMユーザーのアクセスキー情報が hoge という名前のprofileで定義されている [hoge] aws_access_key_id=ACCESS_KEY_ID aws_secret_access_key=SECRET_ACCESS_KEY   1 2 3 4 5 6 7 8 9 10 11 12 13  # ~/.</description>
    </item>
    
    <item>
      <title>Travis CIによるLambdaの自動デプロイ with AWS SAM in Go</title>
      <link>https://horizoon.jp/post/2019/06/11/sam_cicd/</link>
      <pubDate>Tue, 11 Jun 2019 17:16:54 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2019/06/11/sam_cicd/</guid>
      <description>Summary  AWS SAMで管理しているLambda Functionのデプロイ自動化を、AWS CodePipelineやAWS CodeBuildを使うことなく Travis CIを活用して行う  今回利用したLambda FunctionはGo製 Pull Requestのmasterブランチへのmerge時に、samコマンドで自動デプロイ    前提条件  Lambdaのリポジトリはgithub 各種バージョン情報は下記の通り  1 2 3 4 5 6 7 8 9 10 11  $ python --version Python 2.7.12 $ pip --version pip 19.0.3 from /usr/local/lib/python2.7/dist-packages/pip (python 2.7) $ aws --version aws-cli/1.16.175 Python/2.7.12 Linux/4.15.0-1028-gcp botocore/1.12.165 $ sam --version SAM CLI, version 0.17.0   SAMで管理しているLambdaのデプロイをTravis CIで自動化したい SAMで管理しているLambdaのデプロイ自動化をTravis CIで行います。SAMで管理しているからにはSAMのテンプレートとaws-sam-cliを使ってデプロイを行いたいです。なのでTravis公式のLambdaデプロイサポートは使用しません。
 branch !</description>
    </item>
    
    <item>
      <title>Go: module modeでのgo.mod, go.sumファイルを用いた依存ライブラリ管理、及びcontributionの方法＆手順</title>
      <link>https://horizoon.jp/post/2019/04/18/contributing_with_gomodules/</link>
      <pubDate>Thu, 18 Apr 2019 09:43:00 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2019/04/18/contributing_with_gomodules/</guid>
      <description>Summary Go1.13がリリースされてGo Modulesのmodule modeがデフォルトになってからの、go modコマンドを駆使した依存ライブラリ管理、及び第三者のOSSプロジェクトへのcontributionの方法＆手順について
 Module-awareモードに最適化した手順を把握・実践する  ライブラリの追加手順 ライブラリのバージョン更新手順（個別 or 全ライブラリ一括） ライブラリの削除手順   Happy Contributing!! 参考リンク（参考というか、答えは下記リンク先に全て書いてあります）  公式ブログ（和訳） 公式Wiki    前提条件 1 2 3 4 5  $ go version go version go1.12.4 darwin/amd64 # GO111MODULE=on して、常にModule-awareモードとなる状態で検証 $ export GO111MODULE=on   はじめに Githubの&amp;quot;contributing ドキュメントについて githubにプロジェクトを公開する際に、
 ルート docs .github  の3つの内いずれかのディレクトリに contributing* というパターン名（大文字でも可）が付いたファイルを置いておくと、pull-request作成時に「ここにガイドラインがあるよ」と通知してくれるようになります。慣例としてこのファイルは CONTRIBUTING.md という名前で用意されている事が多いです。
このファイルには主に環境構築・テストの実行方法・pull-requestの送り方 などを記載しますが、Goプロジェクトでは「最初に $GOPATH 下にソースを持ってくる」事が前提になっている手順をよく見かけます（自作プロジェクトでもそうしていました）。
GoプロジェクトにおけるCONTRIBUTING.mdはどうあるべきか？ Go ModulesのModule-awareモードがデフォルト挙動になるGo1.13以降では、ソースをcloneしてくるディレクトリは何処でも良い＝必ずしも$GOPATH下にソースを持ってくる必要は無くなりますし、依存ライブラリの追加・削除・バージョン変更を行いたい時の流れも変わります。なので、 CONTRIBUTING.mdに書く内容もそれに合わせておくとcontributorに親切なガイドラインを提示できそうです。
引き続き$GOPATHベースでの開発を推奨するプロジェクトもあるかも知れませんし、内容や粒度はプロジェクトの運営方針や想定読者レベルによっても変わるとは思いますが、この記事ではModule-awareモードのレールに乗る前提で、CONTRIBUTING.mdに書くべき内容と、合わせてmodule modeでのGoプロジェクトにおけるライブラリ管理プラクティスを整理してみます。</description>
    </item>
    
    <item>
      <title>Goで構造体へのインタフェース埋め込み活用例（aws-sdk-goの事例など）</title>
      <link>https://horizoon.jp/post/2019/03/16/go_embedded_interface/</link>
      <pubDate>Sat, 16 Mar 2019 12:03:00 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2019/03/16/go_embedded_interface/</guid>
      <description>Summary 構造体へのインタフェース埋め込み活用例 ×2
 一部メソッドを別処理に差し替え 特定のメソッドだけを実装  外部APIアクセスなどを伴う機能のテストをmockで行いたい場合に、gomockのようなmock用ライブラリに依存せずにmock化を実現    1 2 3 4 5 6 7 8  type Intf interface { MethodY() MethodZ() } type B struct { Intf // こういう埋め込み }   例1：一部メソッドを別処理に差し替え 無名インタフェースの埋め込み例として本家コードで参考になるのがsort/sort.go のこの実装 です。reverse構造体のコメントにも書いてある通りこうした無名インタフェースを埋め込んだ構造体を利用する事で「一部のメソッドだけ別の実装に差し替える」という事を実現しています。
単純なサンプルコードはこんな感じで、Intfというinterfaceを実装済のAという構造体を ReplaceMethodZ に渡すと、MethodZの挙動だけが異なる別の構造体を取得するという挙動になります。
（同じコードはこちら → https://play.golang.org/p/mh803JB5RSt ）
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  package main import ( &amp;#34;fmt&amp;#34; ) type Intf interface { MethodY() MethodZ() } type A struct { Str string } func (a *A) MethodY() { fmt.</description>
    </item>
    
    <item>
      <title>MySQL8.0 Document Store関連技術まとめ</title>
      <link>https://horizoon.jp/post/2019/03/06/mysql8_3x/</link>
      <pubDate>Wed, 06 Mar 2019 12:15:00 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2019/03/06/mysql8_3x/</guid>
      <description>Summary  ver 5.7.12 で追加された「3つのX」。ver 8.0からGA  X Protocol X DevAPI X Plugin   X Protocol  アプリケーションがX Pluginと通信するために使われる新プロトコル。MySQLへの（これまで通りの）SQLインターフェース ＋ NoSQLインタフェースの両方をサポートしている   X DevAPI  MySQL用のNoSQLソリューションを開発したり、Document StoreとしてMySQLを使用したりすることを可能にするAPI Connectors  X DevAPIをサポートしている、言語別クライアント C++, Java, Node.js, .NET, Python の各言語向けライブラリが公式に提供されている   MySQL Shell  MySQLサーバへの新しい対話型インタフェースで、Connector同様にX DevAPIをサポートしている 以前からのmysqlコマンドと同じSQLインタフェースに加えて、JavaScript, Pythonでもコンソール上での各種操作が可能。 JSやPythonでmysqlコンソールを操作できる     X Plugin  X Protocolをサーバー側で有効にして、X Protocolを使ってクライアントとの通信を可能にする為のプラグイン Document StoreとしてMySQLを使用する為にはX Pluginが有効化されていなければならない  ver 8.0.11以降はデフォルトで有効化されている     Document Store  「3つのX」を使って、JSON DocumentをNoSQL/DocumentDB likeに取り扱う仕組み     X Protocol 公式 - MySQL :: MySQL Internals Manual :: 15 X Protocol</description>
    </item>
    
    <item>
      <title>conflict-marker.vimを使ってgitのconflictをvimで高速に解消する</title>
      <link>https://horizoon.jp/post/2019/02/26/git_conflict_vim/</link>
      <pubDate>Tue, 26 Feb 2019 14:41:00 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2019/02/26/git_conflict_vim/</guid>
      <description>Summary 下記手順だとボチボチ速い
 vim conflict対象ファイル qa ]x どの内容を残すかで実行コマンドを変える  HEAD側を残すなら co 非・HEAD側を残すなら ct 両方残すなら cb   q :%norm! @a  前提条件  rhysd/conflict-marker.vim プラグイン をインストールしておく HEAD側を残すか/非・HEAD側を残すか？（あるいは両方消すか？）を個々に判断する必要がなく、ファイル全体で一律どちらを残すかが定まっている  vimで高速conflict解消 conflictなんか起こらない事が理想とはいえそれなりの規模の開発が並行で走っているとなかなかそうもいかず、起こる度に「conflict解消めんどいよね〜」という会話をしてたりします。最近もそういう会話からお互いのやり方を共有し合うという機会があったので、自分がVimで行っている方法を小ネタとして備忘。
前提条件に書いた通り、conflict箇所のどちらを削除するか？がファイル全体で定まっていると判断できたら、
 conflict箇所にジャンプする =&amp;gt; 残したく無い方を削除する =&amp;gt; これをファイル全体で繰り返す  という作業を行えば良く、私が普段使っているNeoVim（Vim）のやり方を晒してみますと下記のような流れの作業になります。
 qa ： レジスタaへのマクロの記録を開始する ]x ： conflict箇所（下方）へジャンプする  conflict-marker.vim プラグイン の機能です。 [x と入力すると逆に上方のconflict箇所へジャンプします   どの内容を残すかで実行コマンドを変える  HEAD側を残すなら co 非・HEAD側を残すなら ct 両方残すなら cb これらも conflict-marker.vim プラグイン の機能です   q ： マクロの記録を終了する :%norm!</description>
    </item>
    
    <item>
      <title>depからgo modulesへの移行と、移行時にTravis CI &amp; GoReleaserでハマる（かもしれない）ポイント</title>
      <link>https://horizoon.jp/post/2019/02/25/dep_to_go_mod/</link>
      <pubDate>Mon, 25 Feb 2019 08:17:54 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2019/02/25/dep_to_go_mod/</guid>
      <description>Summary  depで管理していた既存のGo製ツールをdepからgo moduleに移行してみたが、移行自体は特にハマりどころも無くスンナリいった go moduleへの移行後に依存パッケージのupgradeを実施、これもスンナリいった Travis CI + GoReleaser で、ビルド成果物をGithub Releasesに登録する作業 ＆ GoアプリのHomeBrewパッケージ作成・公開作業 を自動化しようと試みたが、そのCIが git is currently in a dirty state というコケ方をしてちょっとハマった GoReleaserは本当に便利  前提条件 1 2 3  # goのバージョン $ go version go version go1.11.5 darwin/amd64   切り替え手順 depを使っていたので、go mod init して go build の成功を確認できたらdep関連のファイルを削除する、という手順で完了します（対応例）
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  # go mod利用時に必要な環境変数、direnvでプロジェクトディレクトリ下のみ適用されるようにしても良さそう $ export GO111MODULE=on # go modulesの初期設定 $ go mod init # go runしてスタンドアロンで実行すれば、そのタイミングでgo.</description>
    </item>
    
    <item>
      <title>既存のLambda FunctionにLambda Layersを導入し、AWS SAMで管理する（Node.js）</title>
      <link>https://horizoon.jp/post/2019/02/07/lambda_layer_nodejs8/</link>
      <pubDate>Thu, 07 Feb 2019 14:42:54 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2019/02/07/lambda_layer_nodejs8/</guid>
      <description>Summary  axiosなどのモジュールに依存した既存のNode.js Lambda Functionがある このfunctionで使用しているモジュールをAWS Lambda Layersに移行し、aws-sam-cliでデプロイする 既存functionで個別にnpm installしていたモジュールを削除し、デプロイしたLayerを使用するように変更する Layer移行後も既存functionが sam local invoke コマンドでローカルで実行できる事を確認する Layerを使うように変更した既存functionをデプロイする 移行した結果  既存functionのサイズを半分以下に削減できた 既存functionの実行時間を半分以下に削減できた   AWS SAM 便利  Lambda Layerも便利、だけど、チーム開発でCIの仕組み構築まで考え始めると一工夫必要かも？    前提条件 1 2 3 4 5 6 7  # aws-cliのバージョン $ aws --version aws-cli/1.16.80 Python/3.7.1 Darwin/18.2.0 botocore/1.12.70 # aws-sam-cliのバージョン $ sam --version SAM CLI, version 0.10.0   既存Functionで使用中のモジュールをLayersに移行する Layer用のプロジェクトディレクトリを作成し、Layer化したいnpmモジュールをインストールします。 ディレクトリの構成は公式ドキュメントの記載 の通り nodejs/node_modules という構成になるようにします。
1 2 3 4 5 6  $ cd &amp;lt;PROJECT_ROOT&amp;gt; $ mkdir nodejs $ cd nodejs $ npm init -y $ npm install [必要なモジュール群]   ここまで完了すると、PROJECT_ROOTの下には下記のディレクトリとファイルが作成された状態になります</description>
    </item>
    
    <item>
      <title>MySQL5.7 InnoDB のN-gram全文検索を検証＆サービス導入した</title>
      <link>https://horizoon.jp/post/2018/11/19/mysql_innodb_fts/</link>
      <pubDate>Mon, 19 Nov 2018 03:21:36 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2018/11/19/mysql_innodb_fts/</guid>
      <description>※ この記事は以前Mediumで公開した記事 の転載です
MySQL5.7・InnoDB・N-gram という環境下で全文検索の挙動やパフォーマンスについて検証を行った。FULLTEXT INDEXは以前はMyISAMでしか利用できなかったが、 5.6.4からInnoDBでのサポートが始まっていた。
InnoDBの全文検索は5.7、特に5.7.6以降でいわゆるCJK（中国語・日本語・韓国語）がN-gramで標準サポートされ始め、 CREATE TABLE文で簡単にパーサーを指定できる構文のサポート、 設定やクエリの組立で考えないといけない事が減った事で導入障壁がかなり下がっている。 ※4.1と5.0でサービス導入経験がある私の個人的な比較感想です。
FULLTEXT INDEXも他のINDEXと同様にデータ更新・削除の際にINDEXのrebuildが走るので更新時の負荷には注意が必要で、FULLTEXT INDEXの場合は「rebuild負荷が列に含まれる単語数に比例する」「rebuildでの断片化が起こりやすい」という固有の注意点もあり、「件数が多い」「FULLTEXT INDEXを貼ったカラムの更新頻度が激しい」という条件が揃ったテーブルへの導入は十分な検証の上で実施した方が良さそう。
下記に書いた検証を経て開発したサービスでも導入してみたが、結論だけ書くと「（当たり前だが）用法用量さえ守れば十分使える。バックエンドのDBがMySQLなら、リッチな全文検索機構を導入する前段階なんかは活用場面としてオススメできる」と感じた。
やること 国税庁が公開している法人番号データを使って検証してみる。データ件数が100万件強程度になるように東京・大阪・海外 の3種類をマージしたデータを使った。用意したデータとテーブルについてはgithubにupしている。charsetをutf8mb4にしているのは、utf8だと登録時にエラーになる文字を含んだ法人が複数存在する為。collationはデフォルトであるuft8mb4_general_ciを使用する。
1 2 3 4 5 6 7 8  &amp;gt;showcollationlike&amp;#39;utf8mb4%&amp;#39;\G;***************************1.row***************************Collation:utf8mb4_general_ciCharset:utf8mb4Id:45Default:YesCompiled:YesSortlen:1  今回付けたFULLTEXT INDEXは会社名検索・住所検索を想定したものにしている。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  -- 法人番号データ投入用テーブルのCREATE文 CREATETABLE`corporate_nums`(`id`intNOTNULLAUTO_INCREMENT,`sequence_number`varchar(8)NOTNULL,`corporate_number`char(13)DEFAULTNULL,`process`char(2)DEFAULTNULL,`correct`char(1)DEFAULTNULL,`update_date`char(10)DEFAULTNULL,`change_date`char(10)DEFAULTNULL,`name`varchar(150)DEFAULTNULL,`name_image_id`char(8)DEFAULTNULL,`kind`char(3)DEFAULTNULL,`prefecture_name`varchar(10)DEFAULTNULL,`city_name`varchar(20)DEFAULTNULL,`street_number`varchar(300)DEFAULTNULL,`address_image_id`char(8)DEFAULTNULL,`prefecture_code`char(2)DEFAULTNULL,`city_code`char(3)DEFAULTNULL,`post_code`char(7)DEFAULTNULL,`address_outside`varchar(300)DEFAULTNULL,`address_outside_image_id`char(8)DEFAULTNULL,`close_date`char(10)DEFAULTNULL,`close_cause`char(2)DEFAULTNULL,`successor_corporate_number`char(13)DEFAULTNULL,`change_cause`varchar(500)DEFAULTNULL,`assignment_date`char(10),`latest`char(1)DEFAULTNULL,`en_name`varchar(300)DEFAULTNULL,`en_prefecture_name`varchar(9)DEFAULTNULL,`en_city_name`varchar(600)DEFAULTNULL,`en_address_outside`varchar(600)DEFAULTNULL,PRIMARYKEY(`id`),KEY`cn_i1`(`sequence_number`),KEY`cn_i2`(`corporate_number`),FULLTEXTKEY`cn_fti1`(`name`,`en_name`)WITHPARSERngram,FULLTEXTKEY`cn_fti2`(`prefecture_name`,`city_name`,`street_number`,`en_prefecture_name`,`en_city_name`)WITHPARSERngram)ENGINE=InnoDBDEFAULTCHARSET=utf8mb4ROW_FORMAT=DYNAMIC  件数は↓この通り</description>
    </item>
    
    <item>
      <title>Github Pages &amp; Hugo でブログ公開するまで</title>
      <link>https://horizoon.jp/post/2017/05/21/hugo_github_pages/</link>
      <pubDate>Sun, 21 May 2017 12:54:19 +0900</pubDate>
      
      <guid>https://horizoon.jp/post/2017/05/21/hugo_github_pages/</guid>
      <description>ブログサービスを使わずブログを公開するというのが初めての作業だったので、備忘も兼ねてメモしておく。
Github Pages用のリポジトリを作成 Github Pages にブログを公開するに辺り、まずは こちらの公式の記事を参考に
 pages というリポジトリ - 記事のソースファイル置き場 ACCOUNT名.github.io というリポジトリ - Github Pages 公開用リポジトリ  私の場合 ACCOUNT名 は goldeneggg になる。    という2つのリポジトリを作成した。pagesリポジトリで作成したコンテンツのビルド成果物を goldeneggg.github.io リポジトリに出力→pushして公開する、という流れを想定している。
Hugoの導入 サイトジェネレータの選定だが、Go製の hugo が生成処理が速いという評判だったのと、個人的にGoが好き という理由であまり深くは考えずHugoを使う事にした。
1 2 3 4 5 6 7  # brew か go get でインストール $ brew install hugo ## Or $ go get -u -v github.com/spf13/hugo   Hugoの初期設定  最初に作成した 記事のソースファイル置き場 用のリポジトリを git clone する cloneしたディレクトリにcdし、hugo new site .</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://horizoon.jp/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://horizoon.jp/about/</guid>
      <description>I&amp;rsquo;m a Web and Software Developer, AWS Solution Architect and Engineering Manager, especially good at server side engineering.
I also like the technology itself, but I like the job of assembling customer&amp;rsquo;s tasks into concrete system requirements and I&amp;rsquo;m good at it. I have plenty of knowledge on Fintech.
And I&amp;rsquo;m a backpacker. I love all south east asian countries!! and I like taking photos of my visited places with CANON EOS Kiss M!</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://horizoon.jp/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://horizoon.jp/projects/</guid>
      <description>Tools &amp;amp; Libraries   lsec2 - Go: List view of aws ec2 instances.   structil - Go: Runtime and dynamic struct utilities.   gat - Go: Concatnating and printing file to various services.   And others&amp;hellip;  Services Coming soon&amp;hellip;</description>
    </item>
    
  </channel>
</rss>
